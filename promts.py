prompts_for_non_functional_requirements = {
    "Множественное наследование": [
        "1. Всегда учитывай порядок разрешения методов (MRO) для языка Python",
        "2. Предупреждай о потенциальных конфликтах имен между родительскими классами",
        "3. Предлагай альтернативы (например, миксины или композицию), если множественное наследование усложняет архитектуру",
        "4. Демонстрируй примеры корректного использования super() в цепочке наследования",
        "5. Учитывай специфику множественного наследования для других языков (C++, Ruby и т.д.), если они используются",
    ],
    "Потокобезопасность": [
        "1. Проверяй наличие разделяемых изменяемых состояний между потоками",
        "2. Идентифицируй потенциальные race conditions, deadlocks и livelocks",
        "3. Анализируй использование примитивов синхронизации (мьютексы, семафоры, RW-блокировки)",
        "4. Проверяй корректность областей действия блокировок",
        "5. Предлагай thread-safe альтернативы для небезопасных конструкций",
        "6. Обращай внимание на атомарность операций",
        "7. Учитывай memory model используемого языка/платформы",
        "8. Проверяй корректность работы с volatile/atomic переменными",
    ],
    "Анализ изменений": [
        "1. Сравнивай старую и новую версии кода",
        "2. Выявляй потенциальные регрессии",
        "3. Оценивай влияние изменений на связанные модули",
        "4. Проверяй изменения на соответствие кодстайлу проекта",
        "5. Анализируй изменения с точки зрения производительности",
        "6. Особое внимание уделяй изменениям в многопоточных участках кода",
    ],
    "Безопасность": [
        "1. Проверяй, чтобы в коде не использовались небезопасные функции",
        "2. Идентифицируй потенциальные уязвимости в коде",
        "3. Предлагай использование безопасных библиотек и API",
        "4. Проверяй, чтобы в коде не было уязвимостей",
        
    ],
}

patterns_promt = """Использвй патерн Делигейт из книги банда четырех из книги дизайн патернс ООП для решения следующей задачи"""

base_promt = """Ты сениор разработчик, который пишет код на языке {programming_language}.Пиши только код, без объяснений и комментариев. Код должен быть рабочим. Пиши весь код сразу. Пиши всю логику. Так же напиши в каком файле должен быть написан код, который ты напишешь."""

task_promt = """
Ты должен написать код для следующей задачи:

{task}
"""


classes_description_promt = """
Название класса: {class_name}
Путь к файлу: {file_path}
Описание класса: {class_description}
"""

methods_description_promt = """
Название метода: {method_name}
Путь к файлу: {file_path}
Описание метода: {method_description}
"""


context_promt = """Тема задачи: {subject}\n
        Контекст:
        Твое имя: {TAIGA_USER_NAME}
        {context}
        
        Основонйо запрос пользователя:
        {last_comment}
"""

with open("project_structure_structure.txt", "r", encoding="utf-8") as f:
    project_structure_promt = f.read()
